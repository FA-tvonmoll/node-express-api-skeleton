#!/usr/bin/env node

// This file contains application startup code. Originally generated by the Express Application
// Generator (https://expressjs.com/en/starter/generator.html), and then modularized into functions
// for greater clarity.

const express = require('express')();

function initialize() {
  let config = null;
  let logFunctionFactory = null;
  let app = null;
  let port = null;
  let server = null;

  
  require('dotenv').config();

  // function configureRuntimeEnvironment() {
  //   /* eslint-disable global-require */
  //   const environment = process.env.NODE_ENV || 'development';
  //   console.info('environment', environment);
  //   if (environment === 'development') {
  //     require('dotenv').config();
  //   } else if (environment === 'production') {
  //     // TODO: May want to do something like the following: require('newrelic');
  //   } else {
  //     console.error('Please set your NODE_ENV to either `development` or `production`');
  //   }
  //   /* eslint-enable global-require */
  
  //   return require('../config');
  // }
  
  function getLogFunctionFactory(config) {
    const debug = require('debug');
    debug.enable(config.debug);
  
    return require('../src/services/logFunctionFactory');
  }
  
  function initializeApp() {
    return require('../src/app');
  }
  
  function normalizePort(val) {
    const port = parseInt(val, 10);
  
    const isNamedPipe = isNaN(port);
    if (isNamedPipe) {
      return val;
    }
  
    const isPort = (port >= 0);
    if (isPort) {
      return port;
    }
  
    return false;
  }
  
  function setPort(app, config) {
    const port = normalizePort(config.desiredPort);
    app.set('port', port);
    return port;
  }
  
  function createServer(app) {
    const http = require('http');
    return http.createServer(app);  // app.listen() is a convenience method. use it instead of all this??? Action Item: Simplify this file.
  }
  
  function onError(error) {
    if (error.syscall !== 'listen') {
      throw error;
    }

    const bind = typeof port === 'string'
      ? `Pipe ${port}`
      : `Port ${port}`;
  
    switch (error.code) {
    case 'EACCES':
      console.error(`${bind} requires elevated privileges`);
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(`${bind} is already in use`);
      process.exit(1);
      break;
    default:
      throw error;
    }
  }
  
  function onListening() {
    const componentName = 'server';
    const writeInfo = logFunctionFactory.getInfoLogger(componentName);
    const addr = server.address();
    const bind = typeof addr === 'string'
    ? `pipe ${addr}`
    : `port ${addr.port}`;
    writeInfo(`Listening on ${bind}`);
  }
  
  function configureEvents(server) {
    server.on('error', onError);
    server.on('listening', onListening);
  }

  config = require('../config');
  logFunctionFactory = getLogFunctionFactory(config);
  app = initializeApp();
  port = setPort(app, config);
  server = createServer(app);
  configureEvents(server);
  return {
    server,
    port
  };
}

function run(initializationInfo) {
  const { server, port } = initializationInfo;
  server.listen(port);
}

const initializationInfo = initialize();
run(initializationInfo);
